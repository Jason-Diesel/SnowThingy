#version 430 core

layout (local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

struct vertex{
	float m_position[3];
	float m_velocity[3];
	float m_normals[3];
};

layout(std430, binding = 1) buffer VertexBuffer {
	vertex vertecies[];
};

layout(rgba32f, binding = 0) uniform image2D imgOutput;

//https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl
uint hash( uint x ) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}

uint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }
uint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }
uint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }

void colorHeightMap(ivec2 pos){
	const int size = 5;
	for(int x = pos.x - size; x <= pos.x + size; x++){
		for(int y = pos.y - size; y <= pos.y + size; y++){
			if(x >= 0 && y >= 0 && x < 800 && y < 800)
			{
				float s =  (abs(x - pos.x) + abs(y - pos.y) + 1);
				float strength = (1 / pow(s, 0.2)) * 0.01;
				vec4 color = imageLoad(imgOutput, ivec2(x,y));
				color.xyz += strength;
				imageStore(imgOutput, ivec2(x,y), color);
			}
		}
	}
}

void respawnParticle()
{
	vec2 pos = vec2(vertecies[gl_GlobalInvocationID.x].m_position[0], vertecies[gl_GlobalInvocationID.x].m_position[2]);
	vec3 newPos;
	newPos.x = float(mod(hash(uvec2(pos)), 8000)) / 10.0;
	newPos.z = float(mod(hash(uint(pos.x)), 8000)) / 10.0;
	newPos.y = 300 + (float(mod(uvec2(newPos.xy), 100) / 10.0)) - 50;

	vertecies[gl_GlobalInvocationID.x].m_position[0] = newPos.x;
	vertecies[gl_GlobalInvocationID.x].m_position[1] = newPos.y;
	vertecies[gl_GlobalInvocationID.x].m_position[2] = newPos.z;
}

void main()
{
	vertecies[gl_GlobalInvocationID.x].m_position[1] -= 0.1;

	if(vertecies[gl_GlobalInvocationID.x].m_position[1] < 0)
	{
		ivec2 size = imageSize(imgOutput);
		ivec2 pos = ivec2(vertecies[gl_GlobalInvocationID.x].m_position[0], vertecies[gl_GlobalInvocationID.x].m_position[2]);
		colorHeightMap(pos);
		respawnParticle();
	}
}